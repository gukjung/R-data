#4) 등분산성 : 독립변수들의 오차(잔차)의 분산은 일정해야 한다. 특정한 패턴 없이 고르게 분포되어야 한다.
#5) 다중공선성 : 독립변수들 간에 강한 상관관계로 인한 문제가 발생하지 않아야 한다.
#예) 나이와 학년이 신체 구조에 미치는 영향(교집합이 매우 커 다중공선성 우려). 아래 그림 참조.
<Return>
par(mfrow=c(2,2))
plot(fit)
par(mfrow=c(3,3))
plot(fit)
par(mfrow=c(2,3))
plot(fit)
plot(fit, which = c(4,6))
fit2 <- lm(weight ~ height + I(height ^ 2) , data = women)
par(mfrow=c(2,2))
plot(fit)
plot(fit, which = c(4,6))
#선형성을 만족하지 못할 경우
fit2 <- lm(weight ~ height + I(height ^ 2) , data = women)
summary(fit2)
plot(fit2)
plot(fit, which = c(4,6))
#선형성을 만족하지 못할 경우
fit2 <- lm(weight ~ height + I(height ^ 2) , data = women)
summary(fit2)
plot(fit2)
#----------------------
#iris data로 회귀식
head(iris,3)
cor(iris$Sepal.Length, iris$Sepal.Width)
cor(iris$Sepal.Length, iris$Sepal.Length)
cor(iris$Sepal.Length, iris$Petal.Length)
# 상관관계가 약한 변수로 모델 작성
result <- lm(formula = Sepal.Length ~ Sepal.Width)
# 상관관계가 약한 변수로 모델 작성
result <- lm(formula = Sepal.Length ~ Sepal.Width, data = iris)
summary(result)
result2 <- lm(formula = Sepal.Length ~ Petal.Width, data = iris)
summary(result)
result2 <- lm(formula = Sepal.Length ~ Petal.Width, data = iris)
summary(result2)  # p-value:2e-16, multiple r-squared : 0.01382
#-------------------------------
# car data로 회귀식
head(cars, 3)
cor(cars)
mo M- lm(dist ! speed, cars)
mo <- lm(dist ! speed, cars)
mo
mo <- lm(dist ! speed, cars) # 두 변수간 인과관계가 있으므로 회귀분석
mo <- lm(dist ~ speed, cars) # 두 변수간 인과관계가 있으므로 회귀분석
mo
names(mo)
residuals(mo)[1,4]
confint(mo)
coef
coef(mo)
head(cars, 3)
coef(mo)[1] + coef(mo)[2] * 7
coef(mo)[1] + coef(mo)[2] * 10
predict(mo, newdata = data.frame(speed=10))
#신뢰구간의 신뢰대 표시
par(mfrow=c(1,1))
predict(mo, newdata = data.frame(speed=10), interval = 'confidence')
predict(mo, newdata = data.frame(speed=10), interval = 'predict')
plot(dist ~ speed, data = cars)
abline(mo)
pt <- predict(mo, interval='confidence')
lines(cars$speed, pt[,2] col='red')
lines(cars$speed, pt[,2], col='blue')
lines(cars$speed, pt[,2], col='red')
lines(cars$speed, pt[,2], col='blue')
lines(cars$speed, pt[,2], col='red')
lines(cars$speed, pt[,3], col='blue')
summary(mo)
# 모델의 유의성을 위해 anova() 사용
# 완전모형
ful;l <- lm(dist ~ speed, data = cars)
# 모델의 유의성을 위해 anova() 사용
# 완전모형
full <- lm(dist ~ speed, data = cars)
full
# 축소모형
reduced <- lm(dist ~ 1, data = cars)
reduced
anova(reduced, full) # 두 모델을 비교
# 다중회귀 (독립변수 복수)
state.x77
cilnames(state.77)
colnames(state.77)
# 다중회귀 (독립변수 복수)
state.x77
colnames(state.77)
colnames(state.x77)
states <- as.data.frame(state.x77)
states <- as.data.frame(state.x77[,c('Murder','Population','Illiteracy','Frost')])
head(states)
dim(states)
states <- as.data.frame(state.x77[,c('Murder','Population','Illiteracy','Income','Frost')])
head(states)
dim(states)
cor(states)
# 다중회귀모델
fit <- lm(Murder ~ Population+Illiteracy+Income+Frost, data = states)
fit
summary(fit)
par(mar=c(1,1,1,1))
par(mfrow=c(2,2))
par(mar=c(1,1,1,1))
par(mfrow=c(2,2))
plot(fit)
# 다중 공산성 : 독립변수들 간에 강한 상관관계가 나타나는 문제.
install.packages('cat', dependencies = T)
# 다중 공산성 : 독립변수들 간에 강한 상관관계가 나타나는 문제.
install.packages('car', dependencies = T) # 종속적인 모든 패키지를 자동으로 설치해라
library(car)
library(car)
vif(fit)
#문제가 있는 요인을 제거할 수 있다.
vif(fit) > 10
# 이상치 관측 시각화
influencePlot(fit)
vif(fit) #분산 팽창 요인을 구해서 이 값이 10을 넘으면 다중 분산성에 문제가 있다고 판단한다.
#문제가 있는 요인을 제거할 수 있다.
vif(fit) > 10
# 이상치 관측 시각화
influencePlot(fit)
boxplot(states$Murder, horizontal = T)
# 선형성
boxTidwell(Murder ~ Population+Illiteracy, data=states)
#등분산성 만족 여부
ncvTest(fit)
spreadLevelPlot(fit)
# 독립(예측) 변수 선택택
fit1 <- lm(Muder ~ .,data=states)
# 독립(예측) 변수 선택택
fit1 <- lm(Murder ~ .,data=states)
summary(fit1)
fit2 <- lm(Murder ~  Population+Illiteracy,data=states)
summary(fit2)
#AIC 통계량 : 설명력이 우수한 모델을 선택
AIC(fit1, fit2)
#AIC 작업을 자동 처리
#backward : 모든 변수를 넣고 기여도가 낮은 변수부터 하나씩 제거하는 방법
full_model <- lm(Murder ~ .,data=states)
reduced_model <- step(full_model, direction = "backward")
summary(reduced_model)
#forward : 유익한 변수부터 하나씩 추가
min_model <- lm(Murder ~ 1,data=states)
fwd_model <- step(min_model, direction = "forward")
summary(fwd_model)
fwd_model <- step(min_model, direction = "forward",
scope = (Murder ~ Population+Illiteracy+Income+Frost, data = states), trace = 1)
summary(fwd_model)
fwd_model <- step(min_model, direction = "forward",
scope = (Murder ~ Population+Illiteracy+Income+Frost, data = states), trace = 1)
fwd_model <- step(min_model, direction = "forward",
scope = (Murder ~ Population+Illiteracy+Income+Frost), trace = 1)
# all subset regressin :
library(leaps)
# all subset regressin :
library(leaps)
# all subset regressin :
install.packages("leaps")
library(leaps)
m <- leaps::regsubsets(Murder ~ Population+Illiteracy+Income+Frost,
data=states, nbest=4)
summary(m)
m
summary(m)
summary(m)$bic
summary(m)$adjr2
plot(m, scale="adjr2", main = "변수 선택 차트")
#---------------모델 생성 및 평가를 위해 train/test dataset 분리 --------------------
nrow(iris)
set.seed(12)
sam_tt <- sample(1:n)
sam_tt <- sample(1:nrow(iris), nrow(iris) * 0.7, replace = T)
nrow(sam_tt)
NROW(sam_tt)
train <- iris[sam_tt] #학습데이터터
#---------------모델 생성 및 평가를 위해 train/test dataset 분리 --------------------
nrow(iris)
set.seed(12)
sam_tt <- sample(1:nrow(iris), nrow(iris) * 0.7, replace = T)
NROW(sam_tt)
train <- iris[sam_tt] #학습데이터터
test <- iris[sam_tt] #검정데이터
dim(train)
dim(test)
train <- iris[sam_tt, ] #학습데이터터
test <- iris[sam_tt, ] #검정데이터
dim(train)
dim(test)
head(trian, 2)
head(train, 2)
model <- lm(Sepal.Length ~ Sepal.width + Petal.Length + Petal.Width, data = train)
install.packages("iris")
library(iris)
model <- lm(Sepal.Length ~ Sepal.width + Petal.Length + Petal.Width, data = train)
library(iris)
model <- lm(Sepal.Length ~ Sepal.width + Petal.Length + Petal.Width, data = train)
library(car)
# vif
# shapiro.test()
# 독립성 검정
library(car)
car::durbinWatsonTest(model)
head(train, 2)
model <- lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data = train)
# vif
# shapiro.test()
# 독립성 검정
library(car)
car::durbinWatsonTest(model)
anova(model)
summary(model)
#predict
pred <- predict(model, test)
pred[1:3]
head(test[,1], 2)
head(pred, 2)
func <- function(){
ibsa <- readline("근무년수를 입력:")
ibsa <- as.numeric(ibsa)
newdata <- data.frame(jikwon_libsail=ibsa)
predict(lm, newdata=newdata)
}
fucn
fucn()
# 다중회귀모델
fit <- lm(Murder ~ Population+Illiteracy+Income+Frost, data = states)
fit
summary(fit)
# 다중회귀 (독립변수 복수)
state.x77
colnames(state.x77)
states <- as.data.frame(state.x77[,c('Murder','Population','Illiteracy','Income','Frost')])
head(states)
dim(states)
cor(states)
# MariaDB or MySql
drv <- JDBC(driverClass = "org.mariadb.jdbc.Driver",
classPath = "C:/Users/KITCOOP/Downloads/Test-datas-for-R-master/Test-datas-for-R-master/sql_connector/mariadb-java-client-1.3.6.jar")
install.packages("RJDBC")
library(RJDBC)
# MariaDB or MySql
drv <- JDBC(driverClass = "org.mariadb.jdbc.Driver",
classPath = "C:/Users/KITCOOP/Downloads/Test-datas-for-R-master/Test-datas-for-R-master/sql_connector/mariadb-java-client-1.3.6.jar")
drv
conn <- dbConnect(drv, "jdbc:mysql://127.0.0.1:3306/test", "root", "123")
conn
dbListTables(conn)
query <- "select * from sangdata"
goods <- dbGetQuery(conn, query)
goods
query <- "select * from sangdata"
goods <- dbGetQuery(conn, query)
goods
library(RJDBC)
# MariaDB or MySql
drv <- JDBC(driverClass = "org.mariadb.jdbc.Driver",
classPath = "C:/Users/KITCOOP/Downloads/Test-datas-for-R-master/Test-datas-for-R-master/sql_connector/mariadb-java-client-1.3.6.jar")
drv
conn <- dbConnect(drv, "jdbc:mysql://127.0.0.1:3306/test", "root", "123")
conn
dbListTables(conn)
query <- "select * from jikwon"
goods <- dbGetQuery(conn, query)
goods
query <- "select * from jikwon"
jikwon <- dbGetQuery(conn, query)
jikwon
#원격 db의 jikwon 테이블에 근무년수(x)에 대한 연봉(y)을 이용하여 선형회귀분석 모델을
# 작성한 후 근무년수를 입력하면 예상연봉이 나올 수 있도록 하라.
# lm 모델 만들고 jikwon_pay가 종속변수
rm(list=ls())
Nile
head(Nile)
hist(Nile, freq = F)
lines(density(Nile))
help("mean")
?sum
getwd()
#원격 db의 jikwon 테이블에 근무년수(x)에 대한 연봉(y)을 이용하여 선형회귀분석 모델을
# 작성한 후 근무년수를 입력하면 예상연봉이 나올 수 있도록 하라.
# lm 모델 만들고 jikwon_pay가 종속변수
rm(list=ls())
install.packages("RJDBC")
library(RJDBC)
install.packages("RJDBC")
install.packages("RJDBC")
# MariaDB or MySql
drv <- JDBC(driverClass = "org.mariadb.jdbc.Driver",
classPath = "C:/Users/KITCOOP/Downloads/Test-datas-for-R-master/Test-datas-for-R-master/sql_connector/mariadb-java-client-1.3.6.jar")
drv
conn <- dbConnect(drv, "jdbc:mysql://127.0.0.1:3306/test", "root", "123")
conn
dbListTables(conn)
query <- "select * from jikwon"
jikwon <- dbGetQuery(conn, query)
jikwon
rm(list=ls())
install.packages("RJDBC")
library(RJDBC)
# MariaDB or MySql
drv <- JDBC(driverClass = "org.mariadb.jdbc.Driver",
classPath = "C:/Users/KITCOOP/Downloads/Test-datas-for-R-master/Test-datas-for-R-master/sql_connector/mariadb-java-client-1.3.6.jar")
drv
conn <- dbConnect(drv, "jdbc:mysql://127.0.0.1:3306/test", "root", "123")
conn
dbListTables(conn)
query <- "select * from jikwon"
jikwon <- dbGetQuery(conn, query)
jikwon
#원격 db의 jikwon 테이블에 근무년수(x)에 대한 연봉(y)을 이용하여 선형회귀분석 모델을
# 작성한 후 근무년수를 입력하면 예상연봉이 나올 수 있도록 하라.
# lm 모델 만들고 jikwon_pay가 종속변수
rm(list=ls())
cov(1:5, 2:6)
cov(1:5, c(3,3,3,3,3))
cov(1:5, 5:1)
cov(1:5, c(5000,4000,3000,2000,1000))
cor(1:5, 5:1)
cor(1:5, c(5000,4000,3000,2000,1000))
#음료 자료로 상관관계 분석 drinking_water.csv
result <- read.csv("testdata/drinking_water.csv")
result
head(result)
summary(result)
sd(result$적절성)
sd(result$친밀도)
sd(result$만족도)
hist(result$적절성)
hist(result$친밀도)
hist(result$만족도)
cov(result$친밀도, result$적절성)
cov(result)
query <- "select * from jikwon"
jikwon <- dbGetQuery(conn, query)
# MariaDB or MySql
drv <- JDBC(driverClass = "org.mariadb.jdbc.Driver",
classPath = "C:/Users/KITCOOP/Downloads/Test-datas-for-R-master/Test-datas-for-R-master/sql_connector/mariadb-java-client-1.3.6.jar")
drv
conn <- dbConnect(drv, "jdbc:mysql://127.0.0.1:3306/test", "root", "123")
conn
dbListTables(conn)
query <- "select * from jikwon"
jikwon <- dbGetQuery(conn, query)
jikwon
jikwon <- data.frame(jikwon_ibail, jikwon_pay)
jikwon <- data.frame(jikwon_ibsail, jikwon_pay)
ibsa <- jikwon_ibsail
jikwon <- dbGetQuery(conn, query)
jikwon
predict(lm, newdata=newdata)
women
cor(women) # 0.995
plot(weight ~ height, data = women)
fit <- lm(weight ~ height, data = women)
fit
library(shiny)
team<-c("A","B","C")
member<-letters[1:9]
years<-as.integer(c(5,6,7,9,3,4,4,5,2))
team_mem<-data.frame(team=rep(team,c(4,3,2)),member,years)
team_mem
library(shiny)
team<-c("A","B","C")
member<-letters[1:9]
years<-as.integer(c(5,6,7,9,3,4,4,5,2))
team_mem<-data.frame(team=rep(team,c(4,3,2)),member,years)
team_mem
# Define UI for application that draws a histogram
ui <- fluidPage(
h2("부서의 직원선택"),
selectInput("depart","부서를 선택하세요."
,c("A팀"="A","B팀"="B","C팀"="C")),
selectInput("inDepart","부서의 직원을 선택하세요.",choices=character(0)),
h2("직원명단"),
tableOutput("tbl"),
textOutput("txt")
)
# Define server logic required to draw a histogram
server <- function(input, output) {
observe({
x<-team_mem[team_mem$team==input$depart,"member"]
x<-as.character(x)
if(is.null(x))
x<-character(0)
updateSelectInput(session=getDefaultReactiveDomain(),"inDepart",choices = x)
})
output$txt<-renderText({
mem_year<-team_mem[team_mem$member==input$inDepart,"years"]
paste(input$depart,'팀의 ',input$inDepart,' 직원의 경력은 ',mem_year,' 년입니다.'
,sep="")
})
output$tbl<-renderTable({
team_mem
})
}
# Run the application
shinyApp(ui = ui, server = server)
query <- "select * from jikwon where jikwon_pay"
jikwon <- dbGetQuery(conn, query)
jikwon
query <- "select * from jikwon where jikwon_pay"
jikwon <- dbGetQuery(conn, query)
jikwon
#원격 db의 jikwon 테이블에 근무년수(x)에 대한 연봉(y)을 이용하여 선형회귀분석 모델을
# 작성한 후 근무년수를 입력하면 예상연봉이 나올 수 있도록 하라.
# lm 모델 만들고 jikwon_pay가 종속변수
rm(list=ls())
#원격 db의 jikwon 테이블에 근무년수(x)에 대한 연봉(y)을 이용하여 선형회귀분석 모델을
# 작성한 후 근무년수를 입력하면 예상연봉이 나올 수 있도록 하라.
# lm 모델 만들고 jikwon_pay가 종속변수
rm(list=ls())
install.packages("RJDBC")
library(RJDBC)
# MariaDB or MySql
drv <- JDBC(driverClass = "org.mariadb.jdbc.Driver",
classPath = "C:/Users/KITCOOP/Downloads/Test-datas-for-R-master/Test-datas-for-R-master/sql_connector/mariadb-java-client-1.3.6.jar")
drv
conn <- dbConnect(drv, "jdbc:mysql://127.0.0.1:3306/test", "root", "123")
conn
dbListTables(conn)
query <- "select * from jikwon where jikwon_pay"
jikwon <- dbGetQuery(conn, query)
jikwon
install.packages("RJDBC")
install.packages("RJDBC")
install.packages("RJDBC")
install.packages("RJDBC")
install.packages("RJDBC")
install.packages("RJDBC")
install.packages("RJDBC")
rm(list=ls())
install.packages("RJDBC")
library(RJDBC)
# MariaDB or MySql
drv <- JDBC(driverClass = "org.mariadb.jdbc.Driver",
classPath = "C:/Users/KITCOOP/Downloads/Test-datas-for-R-master/Test-datas-for-R-master/sql_connector/mariadb-java-client-1.3.6.jar")
drv
conn <- dbConnect(drv, "jdbc:mysql://127.0.0.1:3306/test", "root", "123")
conn
dbListTables(conn)
install.packages("RJDBC")
install.packages("RJDBC")
install.packages("RJDBC")
install.packages("RJDBC")
install.packages("RJDBC")
install.packages("RJDBC")
install.packages("RJDBC")
library(RJDBC)
# MariaDB or MySql
drv <- JDBC(driverClass = "org.mariadb.jdbc.Driver",
classPath = "C:/Users/KITCOOP/Downloads/Test-datas-for-R-master/Test-datas-for-R-master/sql_connector/mariadb-java-client-1.3.6.jar")
drv
conn <- dbConnect(drv, "jdbc:mysql://127.0.0.1:3306/test", "root", "123")
conn
dbListTables(conn)
query <- "select * from jikwon "
jikwon <- dbGetQuery(conn, query)
jikwon
head(jikwon)
newdata <- data.frame(jikwon_libsail=ibsa)
func <- function(){
ibsa <- readline("근무년수를 입력:")
ibsa <- as.numeric(ibsa)
newdata <- data.frame(jikwon_libsail=ibsa)
predict(lm, newdata=newdata)
}
fucn()
x <- jikwon
x
query <- "select * from jikwon where jikwon_pay "
jikwon
jikwon <- dbGetQuery(conn, query)
jikwon
model <- lm(jikwon_pay ~  jikwon_ibsail,data=jikwon)
model
#-----------------------e답----------------------
# 원격 db의 jikwon 테이블에서 근무년수(x)에 대한 연봉(y)을 이용하여 선형회귀 분석 모델을
# 작성한 후 근무년수를 입력하면 예상연봉이 나올 수 있도록 하라.
# pay종속 년도만 독립변수
rm(list = ls())
gc()
library(RJDBC)
drv <- JDBC(driverClass = "org.mariadb.jdbc.Driver", classPath = "C:/work/mariadb-java-client-1.3.6.jar")
drv
conn <- dbConnect(drv, "jdbc:mysql://127.0.0.1:3306/test", "root", "123")
conn
dbListTables(conn)
query <- "select jikwon_pay, (DATE_FORMAT(NOW(), '%Y')- DATE_FORMAT(jikwon_ibsail, '%Y')) as jikwon_ibsail from jikwon"
jikwon <- dbGetQuery(conn, query)
jikwon <- as.data.frame(jikwon)
jikwon
nrow(jikwon)
model <- lm(jikwon_pay ~ jikwon_ibsail, data = jikwon)
model
summary(model)
anova(model)
cor(jikwon)
View(jikwon)
head(model, 6)
par(mfrow = c(2,2))
plot(lm)
boxTidwell(jikwon_pay ~ jikwon_ibsail, data = jikwon)
func <- function(){
ibsa <- readline("근무년수를 입력 : ")
ibsa <- as.numeric(ibsa)
newdata <- data.frame(jikwon_ibsail = ibsa)
predict(model, newdata = newdata)
}
func()
